@page "/"
@page "/puzzle"

@using Maxyph.Logic
@using static System.Net.WebRequestMethods

@inject HttpClient Http
@inject IJSRuntime JS

<main @onkeypress="ProcessKeyPress" @ref="MainTag">
    <script>
        function toggleHowToPlay() {

            var modal = document.getElementById("how-to-play")
            console.log(modal);
            if (modal.open) {
                modal.close();
            }
            else {
                modal.showModal();
            }
        }
        function copyText(text) {
            navigator.clipboard.writeText(text).then(function () {
                console.log("Copied to clipboard!");
            })
                .catch(function (error) {
                    alert(error);
                });
        }
    </script>
    <h1>
        MAXYPH
    </h1>
    <button @onclick='() => JS.InvokeVoidAsync("toggleHowToPlay")'>How to play</button>
    <dialog id="how-to-play" @onclick='() => JS.InvokeVoidAsync("toggleHowToPlay")'>
        <p>
            Enter 6 valid 5 letter English words to complete the puzzle. Earn a point for each unique character in
            your
            solution.
        </p>
        <ul>
            <li>A character in an orange box cannot be changed. The first row value is provided, but further rows inherit the value from the word above them.</li>
            <li>Orange-boxed letters from previous rows cannot be reused.</li>
            <li>A maximum possible (theoretical) score is 25.</li>
            <li>You can surrender at any time and take the score of your current valid words.</li>
            <li>Have fun!</li>
        </ul>
    </dialog>
    <div class="puzzle">
        @foreach (var (row, wIndex) in words.Select((x, i) => (x, i)))
        {
            <div class="row">
                <div class="word">
                    @if (wIndex == 0)
                    {
                        <div class="box">
                            <div>
                                @Score
                            </div>
                        </div>
                    }
                    @foreach (var (letter, lIndex) in row.Letters.Select((x, i) => (x, i)))
                    {
                        <div class="box @(letter.Locked ? "locked":"") @((WordIndex == wIndex && lIndex == LetterIndex) ?  "here":"" ) ">
                            <div>@letter.Value</div>
                        </div>
                    }
                    @if (wIndex == 5)
                    {
                        <div class="box">
                            <div>
                                <button class="inline end-game" @onclick="() => EndGame()">❌</button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
    <div class="message">
        @StatusMessage
    </div>
    @if (PuzzleCompleted)
    {
        <div class="message">
            <button @onclick="() => GetCopyText()">Copy Score to clipboard</button>
        </div>
    }
    <div class="keyboard">
        @foreach (var letterRow in Keyboard)
        {
            <div class="key-row">
                @foreach (var letter in letterRow)
                {
                    <button class="key @(UsedLetters.Contains(letter) ? "used":"") @(LockedLetters.Contains(letter) ? "locked-letter":"") "
                            @onclick="() => { if (!LockedLetters.Contains(letter)){ ProcessKeyClick(letter);}}">
                        @{
                            if (letter == Enter)
                            {
                                <text>Enter</text>
                            }
                            else if (letter == Backspace)
                            {
                                <text>🔙</text>
                            }
                            else
                            {
                                @letter
                            }
                        }
                    </button>
                }
            </div>
        }
    </div>
</main>

@code {

    private ElementReference MainTag;
    private ElementReference HowToPlay;

    private List<Word> words = new();
    private Word PuzzleStart = new();
    private List<string> ValidWords = new();
    private List<char> UsedLetters = new();
    private List<char> LockedLetters = new();
    private int WordIndex = 0;
    private int LetterIndex = 0;
    private bool PuzzleCompleted = false;

    private char Backspace = '←';
    private char Enter = '→';

    private string StatusMessage = string.Empty;
    private int Score = 0;
    private List<List<Char>> Keyboard = new() {
        { new () {'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'} },
        { new () {'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ' '} },
        { new () { '→', 'z', 'x', 'c', 'v', 'b', 'n', 'm', '←'} },
        };

    protected override async Task OnInitializedAsync()
    {
        await LoadTodaysPuzzle();

        //await MainTag.FocusAsync();
        var wordstxt = await Http.GetStringAsync("Data/Words.txt");
        ValidWords = wordstxt.Split('\n').Select(x => x.Trim()).ToList();

        StateHasChanged();

        await Task.CompletedTask;
    }

    protected async Task<bool> LoadTodaysPuzzle()
    {
        var puzzle = await Http.GetFromJsonAsync<PuzzleData>("https://u2qy92og0i.execute-api.us-west-2.amazonaws.com/puzzle");
        //var puzzle = await Http.GetFromJsonAsync<PuzzleData>("Data/DailyPuzzle.json");

        foreach (var row in puzzle.puzzle.data)
        {
            var nextWord = new Word();
            nextWord.LockLetter(row.lockIndex);
            nextWord.SetLetterAtPosition(row.lockIndex, row.letter.ToLower().FirstOrDefault());
            words.Add(nextWord);
        }
        ProcessLetter(' ');

        return true;
    }

    protected bool IsWordValid(Word word)
    {
        var lockedWords = words.Take(WordIndex).Select(x => x.ToString());
        StatusMessage = "";
        if (lockedWords.Contains(word.ToString()))
        {
            StatusMessage = "You cannot use a word from a previous row";
            return false;
        }
        if (ValidWords.Contains(word.ToString().ToLowerInvariant()))
        {
            return true;
        }
        else
        {
            StatusMessage = "Not a valid word";
            return false;
        }
    }

    protected void ProcessLetter(char keyHit)
    {
        if (keyHit == Backspace)
        {
            var currentLetter = words[WordIndex].Letters[LetterIndex];
            if (currentLetter.Value != ' ')
            {
                currentLetter.Value = ' ';
            }
            else
            {
                LetterIndex = Math.Max(0, Math.Min(5, LetterIndex - 1));
            }
            var newLetter = words[WordIndex].Letters[LetterIndex];
            if (newLetter.Locked)
            {
                LetterIndex = Math.Max(0, Math.Min(5, LetterIndex - 1));
            }
        }
        else if (keyHit == Enter)
        {
            var word = words[WordIndex];
            if (IsWordValid(word))
            {
                WordIndex++;
                LetterIndex = 0;
                Score = CalcScore();

                var newWord = words.ElementAtOrDefault(WordIndex);
                if (newWord != null)
                {
                    var lastWord = words.ElementAtOrDefault(WordIndex - 1);
                    var lockedIndex = newWord.Letters.FindIndex(x => x.Locked);
                    var lockedParent = lastWord.Letters.ElementAtOrDefault(lockedIndex);
                    if (lockedParent != null)
                    {
                        newWord.Letters[lockedIndex].Value = lockedParent.Value;
                    }
                }

                if (WordIndex >= 6)
                {
                    StatusMessage = "You have completed the puzzle! Your score is " + Score;
                    PuzzleCompleted = true;
                    GetCopyText();
                    StateHasChanged();
                    return;
                }
                UsedLetters = words.Take(WordIndex).SelectMany(x => x.Letters.Select(z => z.Value).Where(z => char.IsLetter(z))).ToList();
                LockedLetters = words.Take(WordIndex).SelectMany(x => x.Letters.Where(y => y.Locked).Select(z => z.Value).Where(z => char.IsLetter(z))).ToList();
            }
        }
        else
        {
            if (char.IsAsciiLetter(keyHit))
            {
                if (LetterIndex <= 5)
                {
                    words[WordIndex].Letters[LetterIndex].Value = keyHit;
                    LetterIndex = Math.Min(LetterIndex + 1, 4);
                }
            }
        }

        var nextLetter = words[WordIndex].Letters[LetterIndex];
        if (nextLetter.Locked)
        {
            LetterIndex = Math.Min(LetterIndex + 1, 4);
        }
        CalcScore();
        StateHasChanged();
    }

    private void ProcessKeyPress(KeyboardEventArgs e)
    {
        ProcessLetter(e.Key.FirstOrDefault());
    }

    private void ProcessKeyClick(char key)
    {
        ProcessLetter(key);
    }

    private void EndGame()
    {
        StatusMessage = "You have surrendered. Your score is " + Score;
        PuzzleCompleted = true;
        StateHasChanged();
    }

    private int CalcScore()
    {
        var letters = words.SelectMany(x => x.Letters.Select(z => z.Value).Where(z => char.IsLetter(z)));
        var total = new HashSet<char>(letters);
        return total.Count;
    }

    private void GetCopyText()
    {
        // Large Orange Diamond - U+1F536
        // Large Blue Diamond - U+1F537
        // Lock (Closed Lock) - U+1F512
        // Locked with Key - U+1F510

        //var a = Convert.ToInt32("\U0001F536", 16);
        var OrangeDiamond = "\U0001F536";
        var BlueDiamond = "\U0001F537";
        var Locked = "\U0001F512";
        var LockedWithKey = "\U0001F510";

        var seenLetters = new HashSet<char>() { '\0' };

        var output = words.Select((x, i) =>
        {
            var wordRow = x.Letters.Select(z =>
            {
                if (z.Locked)
                {
                    seenLetters.Add(z.Value);
                    if (i == 0)
                    {
                        return LockedWithKey;
                    }
                    else
                    {
                        return Locked;
                    }
                }
                if (seenLetters.Contains(z.Value))
                {
                    return BlueDiamond;
                }
                else
                {
                    seenLetters.Add(z.Value);
                    return OrangeDiamond;
                }
            });
            return string.Join("", wordRow) + "\n";
        });
        var scoreCopy = $"Maxyph Puzzle\n{DateTime.Now.ToString("ddd MMM d")}\n{string.Join("", output)}";
        JS.InvokeVoidAsync("copyText", scoreCopy);
    }
}

